Compiling Refactorial on OSX Yosemite
=====================================

**WARNING:** This README and the changes to the CMake files in this fork are "**works-on-my-machine**" quality. I made the minimum effort to get stuff running on my own machine, and I've got no idea what it will do on yours. It might not even compile, and it might eat your cookis or steal your girlfriend. You've been warned.

Installing clang
----------------

Install llvm from homebrew:

    brew install llvm --with-rtti --with-clang

Refactorial's CMake build requires `llvm-config` to be found in your shell's `PATH`. For the brewed llvm above, you can find it here:

    /usr/local/Cellar/llvm/3.5.1/bin

Either temporarily add that directory to your path, or `brew link` the llvm package (have not tried the latter, so I cannot confirm that it works).



Compiling refactorial
---------------------

Clone refactorial repo (st-j fork):

    git clone git@github.com:st-j/refactorial.git

Switch to clang-3.5 branch

    git checkout clang-3.5


I've compiled it with

    CC=/usr/local/Cellar/llvm/3.5.1/bin/clang CXX=/usr/local/Cellar/llvm/3.5.1/bin/clang++ cmake -GNinja ..
    ninja

If you used `brew link` to link homebrew's clang, configure the linked clang compiler in the `CC` and `CXX` variables (I believe it is called something like `clang-3.5`).

Using refactorial with CMake Projects
-------------------------------------

###Configure your project

Refactorial requires a compilation database that can be generated with CMake.
Simply configure your project with:

    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

After generating the project with cmake, you should find a file called `compile_commands.json` in your build directory. Building the compilation database seems to work with the Ninja and Unix Makefile generators, and definitely does not work with the Visual Studio Generator.

#### System headers

In case refactorial complains about being unable to find system headers
(such as `<iostream>`), you can explicitly add the include directories that
contain the C and C++ system headers to your cmake file. In case of my
homebrewed clang 3.5, these are:

    include_directories("/usr/local/Cellar/llvm/3.5.1/include/c++/v1")
    include_directories("/usr/local/Cellar/llvm/3.5.1/lib/clang/3.5.1/include/")

After regenerating the compilation database, it should contain those
header paths, and refactorial should be able to find the headers.

#### Code coverage

Turn off code coverage: refactorial currently doesn't seem to like
the `--coverage` option.

Running refactorial
--------------------

First, you need to set up a YAML file describing your refactoring step. See the main README file in this repository and tests directory in the source tree for examples:
[https://github.com/greye/refactorial/tree/master/tests](https://github.com/greye/refactorial/tree/master/tests).

Then run refactorial with

    refactorial -p=compile_commands.json < refac.yaml

where `refac.yaml` is the YAML file for your refactoring


Using refactorial with non-CMake Projects
-----------------------------------------

Convert your project to CMake. Seriously.

You can also make a "fake" compilation database for part of your non-CMake project - the format is easy enough to be generated by a script. YMMV.


